#include <gtest/gtest.h>
#include "detector.h"
#include <opencv2/opencv.hpp>
#include <filesystem>
#include <chrono>
#include <cstdlib>

namespace fs = std::filesystem;

static const std::string kCascade = "/app/teacher_dataset/haarcascade_frontalface_default.xml";
static const std::string kFaceImg = "/app/dataset/ferrer.jpeg";

// 1. Check that the cascade loads correctly
TEST(Detector, InitCascadeOk) {
    EXPECT_NO_THROW(init_cascade(kCascade));
}

// 2. Check that an exception is thrown for an invalid path
TEST(Detector, InitCascadeBadPath) {
    EXPECT_THROW(init_cascade("/app/teacher_dataset/missing.xml"), std::runtime_error);
}

// 3. Check that there are no detections on an empty image
TEST(Detector, EmptyImageNoDetections) {
    init_cascade(kCascade);
    cv::Mat img = cv::Mat::zeros(480, 640, CV_8UC3);
    auto dets = detect_faces(img);
    EXPECT_TRUE(dets.empty());
}

// 4. Check real face detection on the ferrer.jpeg image
TEST(Detector, FaceImageHasDetections) {
    init_cascade(kCascade);
    cv::Mat img = cv::imread(kFaceImg);
    ASSERT_FALSE(img.empty()) << "Test image not found: " << kFaceImg;

    auto dets = detect_faces(img);

    EXPECT_GE(dets.size(), 1) << "No faces detected on image " << kFaceImg;

    for (auto& d : dets) {
        EXPECT_GE(d.x, 0);
        EXPECT_GE(d.y, 0);
        EXPECT_LE(d.br().x, img.cols);
        EXPECT_LE(d.br().y, img.rows);
    }
}

// 5. Check that after drawing faces the image size remains the same
TEST(Detector, DrawFacesKeepsSize) {
    init_cascade(kCascade);
    cv::Mat img = cv::imread(kFaceImg);
    ASSERT_FALSE(img.empty());
    auto dets = detect_faces(img);
    cv::Mat vis = draw_faces(img, dets);
    EXPECT_EQ(vis.size(), img.size());
}

// 6. Check that repeated cascade initialization works without errors
TEST(Detector, CascadeReinit) {
    EXPECT_NO_THROW({
        init_cascade(kCascade);
        init_cascade(kCascade); // repeated loading of the same file
    });
}


// 7. Check that detection runs fast enough (< 0.5 seconds)
TEST(Detector, PerformanceCheck) {
    init_cascade(kCascade);
    cv::Mat img = cv::imread(kFaceImg);
    ASSERT_FALSE(img.empty());

    auto start = std::chrono::high_resolution_clock::now();
    auto dets = detect_faces(img);
    auto end = std::chrono::high_resolution_clock::now();

    std::chrono::duration<double> elapsed = end - start;
    EXPECT_LT(elapsed.count(), 0.5) << "Face detection is too slow: " << elapsed.count() << "s";
}

// 8. Integration test: check that the CLI face_detect creates output files in /app/results
TEST(Integration, FaceDetectCreatesOutputFiles) {
    // Clear the results directory before running
    fs::path results_dir = "/app/results";
    for (auto& entry : fs::directory_iterator(results_dir))
        fs::remove(entry.path());

    // Run the CLI program
    int ret = std::system("/app/build/face_detect");
    EXPECT_EQ(ret, 0) << "face_detect failed to execute correctly";

    // Check that output .jpg files were created
    size_t count = 0;
    for (auto& entry : fs::directory_iterator(results_dir)) {
        if (entry.path().extension() == ".jpg") count++;
    }
    EXPECT_GT(count, 0) << "No result images were generated by face_detect";
}
